<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Tic Tac Toe</title>
    <!-- {% load static %} -->
    <link rel="stylesheet" href="{% static 'css/game.css'%}" />
</head>
<body>
    <section>
        <h1 class="game--title">Tic Tac Toe</h1>
        {% csrf_token %}
        <div class="game--container">
            <div class="cell" onclick="test(1)" id="cell_1"></div>
            <div class="cell" onclick="test(2)" id="cell_2"></div>
            <div class="cell" onclick="test(3)" id="cell_3"></div>
            <div class="cell" onclick="test(4)" id="cell_4"></div>
            <div class="cell" onclick="test(5)" id="cell_5"></div>
            <div class="cell" onclick="test(6)" id="cell_6"></div>
            <div class="cell" onclick="test(7)" id="cell_7"></div>
            <div class="cell" onclick="test(8)" id="cell_8"></div>
            <div class="cell" onclick="test(9)" id="cell_9"></div>
        </div>
        <h2 class="game--status"></h2>
        <button class="game--restart">Restart Game</button>
    </section>

    <script type="text/javascript">

        const game = new Map();
        game.set(1, [0, 0]);
        game.set(2, [0, 1]);
        game.set(3, [0, 2]);
        game.set(4, [1, 0]);
        game.set(5, [1, 1]);
        game.set(6, [1, 2]);
        game.set(7, [2, 0]);
        game.set(8, [2, 1]);
        game.set(9, [2, 2]);


        function getCookie(name) {
            let cookieValue = null;
            if (document.cookie && document.cookie !== '') {
                const cookies = document.cookie.split(';');
                for (let i = 0; i < cookies.length; i++) {
                    const cookie = cookies[i].trim();
                    // Does this cookie string begin with the name we want?
                    if (cookie.substring(0, name.length + 1) === (name + '=')) {
                        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                        break;
                    }
                }
            }
            return cookieValue;
        }


        let character = "o";
        const getResponse = (url) => {
            return fetch(url).then((resp) => {
                return resp.json();
            });
        };



        window.setInterval(function showRequest() {
            getResponse('@Url.Action("Show", "Home")')
                .then(data => {
                    for (let i in data) {
                        for (let [key, value] of game) {
                            // console.log(value[0], value[1]);
                            // console.log(data[i]['x_cor'], data[i]['y_cor']);
                            if (value[0] == data[i]['x_cor'] && value[1] == data[i]['y_cor']) {
                                let char = "x";
                                if (data[i]['character'])
                                    char = "o";

                                document.getElementById("cell_" + key).innerHTML = char;
                            }

                        }
                    }


                })
                .catch(err => console.log(err));
        }, 2000)


        function sendRequest(method, url, body = null) {
            let csrftoken = getCookie('csrftoken');
            let headers = {
                'Accept': 'multipart/form-data',
                'X-CSRFToken': csrftoken,
                'X-Requested-With': 'XMLHttpRequest'
            }

            // alert(JSON.stringify(body))
            // alert(csrftoken)
            return fetch(url, {
                method: "POST",
                body: body,
                headers: headers,
                credentials: 'same-origin'
            }).then(response => {
                // return response.text()
                if (response.ok) {
                    return response.json()
                }


                return response.json().then(error => {
                    const e = new Error('Something Wrong')
                    e.data = error
                    throw e
                })
            })
        }


        let first = true
        const test = (index) => {



            // alert(game.get(index))

            const body = new FormData()
            body.append('x_cor', game.get(index)[0]),
                body.append('y_cor', game.get(index)[1]),
                body.append('character', character)

            sendRequest('POST', '@Url.Action("Move", "Home")', body)
                .then(data => {
                    if (data['character']) {
                        character = "x";
                    } else {
                        character = "o";
                    }




                })
                .catch(err => console.log(err));
        }

    </script>
</body>
</html>